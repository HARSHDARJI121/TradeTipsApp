rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        (request.auth.token.email == 'darjiharsh2005@gmail.com' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.name == 'admin');
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }

    // Groups Collection - Allow all authenticated users to read and write
    match /groups/{groupName} {
      allow read, write: if isAuthenticated();
      
      // Group Members Subcollection - Allow all authenticated users
      match /members/{memberId} {
        allow read, write: if isAuthenticated();
      }
      
      // Group Messages Subcollection - Allow all authenticated users to send and receive
      match /messages/{messageId} {
        allow read, write: if isAuthenticated();
      }
    }

    // Group Chats Collection - Allow all authenticated users
    match /group_chats/{groupName} {
      allow read, write: if isAuthenticated();
    }

    // Admin Chats Collection - Allow direct messaging to admin
    match /admin_chats/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create: if isAuthenticated(); // Allow any authenticated user to create admin chat
      allow update: if isAuthenticated() && 
        (resource.data.senderId == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && 
        (resource.data.senderId == request.auth.uid || isAdmin());
    }

    // Payments Collection
    match /payments/{paymentId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Plans Collection
    match /plans/{planId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Requests Collection
    match /requests/{requestId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Admin Notifications Collection
    match /admin_notifications/{notificationId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // News Collection
    match /news/{newsId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Typing Status Collection
    match /typing_status/{statusId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }
  }
} 